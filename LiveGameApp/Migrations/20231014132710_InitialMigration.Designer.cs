// <auto-generated />
using System;
using LiveGameApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LiveGameApp.Migrations
{
    [DbContext(typeof(LiveGameAppContext))]
    [Migration("20231014132710_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("boolean");

                    b.Property<string>("Use")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Appuser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("appuser_email_key");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("appuser_username_key");

                    b.ToTable("appuser", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Author", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.HasKey("UserId", "GameId")
                        .HasName("author_pkey");

                    b.HasIndex("GameId");

                    b.ToTable("author", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Directmessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datetime");

                    b.Property<int>("RecipientId")
                        .HasColumnType("integer")
                        .HasColumnName("recipient_id");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer")
                        .HasColumnName("sender_id");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("directmessage", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Friend", b =>
                {
                    b.Property<int>("UserLowId")
                        .HasColumnType("integer")
                        .HasColumnName("user_low_id");

                    b.Property<int>("UserHighId")
                        .HasColumnType("integer")
                        .HasColumnName("user_high_id");

                    b.HasKey("UserLowId", "UserHighId")
                        .HasName("friend_pkey");

                    b.HasIndex("UserHighId");

                    b.ToTable("friend", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Friendrequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int>("RecipientId")
                        .HasColumnType("integer")
                        .HasColumnName("recipient_id");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer")
                        .HasColumnName("sender_id");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("friendrequest", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer")
                        .HasColumnName("max_players");

                    b.Property<int>("MinPlayers")
                        .HasColumnType("integer")
                        .HasColumnName("min_players");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rules");

                    b.HasKey("Id");

                    b.ToTable("game", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Gamegenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("gamegenre", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Hasrole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("hasrole_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("hasrole", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Invitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer")
                        .HasColumnName("plan_id");

                    b.Property<int>("RecipientId")
                        .HasColumnType("integer")
                        .HasColumnName("recipient_id");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("TypeId");

                    b.ToTable("invitation", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Inviterequesttype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("inviterequesttype", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Isgenre", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer")
                        .HasColumnName("genre_id");

                    b.HasKey("GameId", "GenreId")
                        .HasName("isgenre_pkey");

                    b.HasIndex("GenreId");

                    b.ToTable("isgenre", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datetime");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("message", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Owns", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.HasKey("UserId", "GameId")
                        .HasName("owns_pkey");

                    b.HasIndex("GameId");

                    b.ToTable("owns", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Participant", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.HasKey("UserId", "RoomId")
                        .HasName("participant_pkey");

                    b.HasIndex("RoomId");

                    b.ToTable("participant", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Participationrequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer")
                        .HasColumnName("plan_id");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer")
                        .HasColumnName("sender_id");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("SenderId");

                    b.HasIndex("TypeId");

                    b.ToTable("participationrequest", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Plan", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datetime");

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.Property<int>("HostUserId")
                        .HasColumnType("integer")
                        .HasColumnName("host_user_id");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer")
                        .HasColumnName("max_players");

                    b.Property<int>("MaxSpectators")
                        .HasColumnType("integer")
                        .HasColumnName("max_spectators");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PrivacyTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("privacy_type_id");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("HostUserId");

                    b.HasIndex("PrivacyTypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("plan", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Plantype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("plantype", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Player", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer")
                        .HasColumnName("plan_id");

                    b.HasKey("UserId", "PlanId")
                        .HasName("player_pkey");

                    b.HasIndex("PlanId");

                    b.ToTable("player", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Privacytype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("privacytype", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Reviewable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("AverageRating")
                        .HasColumnType("double precision")
                        .HasColumnName("average_rating");

                    b.HasKey("Id");

                    b.ToTable("reviewable", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Reviews", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("ReviewableId")
                        .HasColumnType("integer")
                        .HasColumnName("reviewable_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.HasKey("UserId", "ReviewableId")
                        .HasName("reviews_pkey");

                    b.HasIndex("ReviewableId");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("room", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Spectator", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer")
                        .HasColumnName("plan_id");

                    b.HasKey("UserId", "PlanId")
                        .HasName("spectator_pkey");

                    b.HasIndex("PlanId");

                    b.ToTable("spectator", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LiveGameApp.Models.Author", b =>
                {
                    b.HasOne("LiveGameApp.Models.Game", "Game")
                        .WithMany("Author")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("author_game_id_fkey");

                    b.HasOne("LiveGameApp.Models.Appuser", "User")
                        .WithMany("Author")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("author_user_id_fkey");

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LiveGameApp.Models.Directmessage", b =>
                {
                    b.HasOne("LiveGameApp.Models.Appuser", "Recipient")
                        .WithMany("DirectmessageRecipient")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("directmessage_recipient_id_fkey");

                    b.HasOne("LiveGameApp.Models.Appuser", "Sender")
                        .WithMany("DirectmessageSender")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("directmessage_sender_id_fkey");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("LiveGameApp.Models.Friend", b =>
                {
                    b.HasOne("LiveGameApp.Models.Appuser", "UserHigh")
                        .WithMany("FriendUserHigh")
                        .HasForeignKey("UserHighId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("friend_user_high_id_fkey");

                    b.HasOne("LiveGameApp.Models.Appuser", "UserLow")
                        .WithMany("FriendUserLow")
                        .HasForeignKey("UserLowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("friend_user_low_id_fkey");

                    b.Navigation("UserHigh");

                    b.Navigation("UserLow");
                });

            modelBuilder.Entity("LiveGameApp.Models.Friendrequest", b =>
                {
                    b.HasOne("LiveGameApp.Models.Appuser", "Recipient")
                        .WithMany("FriendrequestRecipient")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("friendrequest_recipient_id_fkey");

                    b.HasOne("LiveGameApp.Models.Appuser", "Sender")
                        .WithMany("FriendrequestSender")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("friendrequest_sender_id_fkey");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("LiveGameApp.Models.Game", b =>
                {
                    b.HasOne("LiveGameApp.Models.Reviewable", "IdNavigation")
                        .WithOne("Game")
                        .HasForeignKey("LiveGameApp.Models.Game", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("game_id_fkey");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("LiveGameApp.Models.Hasrole", b =>
                {
                    b.HasOne("LiveGameApp.Models.Role", "Role")
                        .WithMany("Hasrole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hasrole_role_id_fkey");

                    b.HasOne("LiveGameApp.Models.Appuser", "User")
                        .WithMany("Hasrole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hasrole_user_id_fkey");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LiveGameApp.Models.Invitation", b =>
                {
                    b.HasOne("LiveGameApp.Models.Plan", "Plan")
                        .WithMany("Invitation")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("invitation_plan_id_fkey");

                    b.HasOne("LiveGameApp.Models.Appuser", "Recipient")
                        .WithMany("Invitation")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("invitation_recipient_id_fkey");

                    b.HasOne("LiveGameApp.Models.Inviterequesttype", "Type")
                        .WithMany("Invitation")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("invitation_type_id_fkey");

                    b.Navigation("Plan");

                    b.Navigation("Recipient");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("LiveGameApp.Models.Isgenre", b =>
                {
                    b.HasOne("LiveGameApp.Models.Game", "Game")
                        .WithMany("Isgenre")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("isgenre_game_id_fkey");

                    b.HasOne("LiveGameApp.Models.Gamegenre", "Genre")
                        .WithMany("Isgenre")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("isgenre_genre_id_fkey");

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("LiveGameApp.Models.Message", b =>
                {
                    b.HasOne("LiveGameApp.Models.Room", "Room")
                        .WithMany("Message")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("message_room_id_fkey");

                    b.HasOne("LiveGameApp.Models.Appuser", "User")
                        .WithMany("Message")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("message_user_id_fkey");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LiveGameApp.Models.Owns", b =>
                {
                    b.HasOne("LiveGameApp.Models.Game", "Game")
                        .WithMany("Owns")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("owns_game_id_fkey");

                    b.HasOne("LiveGameApp.Models.Appuser", "User")
                        .WithMany("Owns")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("owns_user_id_fkey");

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LiveGameApp.Models.Participant", b =>
                {
                    b.HasOne("LiveGameApp.Models.Room", "Room")
                        .WithMany("Participant")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("participant_room_id_fkey");

                    b.HasOne("LiveGameApp.Models.Appuser", "User")
                        .WithMany("Participant")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("participant_user_id_fkey");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LiveGameApp.Models.Participationrequest", b =>
                {
                    b.HasOne("LiveGameApp.Models.Plan", "Plan")
                        .WithMany("Participationrequest")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("participationrequest_plan_id_fkey");

                    b.HasOne("LiveGameApp.Models.Appuser", "Sender")
                        .WithMany("Participationrequest")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("participationrequest_sender_id_fkey");

                    b.HasOne("LiveGameApp.Models.Inviterequesttype", "Type")
                        .WithMany("Participationrequest")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("participationrequest_type_id_fkey");

                    b.Navigation("Plan");

                    b.Navigation("Sender");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("LiveGameApp.Models.Plan", b =>
                {
                    b.HasOne("LiveGameApp.Models.Game", "Game")
                        .WithMany("Plan")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("plan_game_id_fkey");

                    b.HasOne("LiveGameApp.Models.Appuser", "HostUser")
                        .WithMany("Plan")
                        .HasForeignKey("HostUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("plan_host_user_id_fkey");

                    b.HasOne("LiveGameApp.Models.Reviewable", "IdNavigation")
                        .WithOne("Plan")
                        .HasForeignKey("LiveGameApp.Models.Plan", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("plan_id_fkey");

                    b.HasOne("LiveGameApp.Models.Privacytype", "PrivacyType")
                        .WithMany("Plan")
                        .HasForeignKey("PrivacyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("plan_privacy_type_id_fkey");

                    b.HasOne("LiveGameApp.Models.Plantype", "Type")
                        .WithMany("Plan")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("plan_type_id_fkey");

                    b.Navigation("Game");

                    b.Navigation("HostUser");

                    b.Navigation("IdNavigation");

                    b.Navigation("PrivacyType");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("LiveGameApp.Models.Player", b =>
                {
                    b.HasOne("LiveGameApp.Models.Plan", "Plan")
                        .WithMany("Player")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("player_plan_id_fkey");

                    b.HasOne("LiveGameApp.Models.Appuser", "User")
                        .WithMany("Player")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("player_user_id_fkey");

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LiveGameApp.Models.Reviews", b =>
                {
                    b.HasOne("LiveGameApp.Models.Reviewable", "Reviewable")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("reviews_reviewable_id_fkey");

                    b.HasOne("LiveGameApp.Models.Appuser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("reviews_user_id_fkey");

                    b.Navigation("Reviewable");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LiveGameApp.Models.Spectator", b =>
                {
                    b.HasOne("LiveGameApp.Models.Plan", "Plan")
                        .WithMany("Spectator")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("spectator_plan_id_fkey");

                    b.HasOne("LiveGameApp.Models.Appuser", "User")
                        .WithMany("Spectator")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("spectator_user_id_fkey");

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("LiveGameApp.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("LiveGameApp.Models.Appuser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("LiveGameApp.Models.Appuser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("LiveGameApp.Models.Appuser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LiveGameApp.Models.Appuser", b =>
                {
                    b.Navigation("Author");

                    b.Navigation("DirectmessageRecipient");

                    b.Navigation("DirectmessageSender");

                    b.Navigation("FriendUserHigh");

                    b.Navigation("FriendUserLow");

                    b.Navigation("FriendrequestRecipient");

                    b.Navigation("FriendrequestSender");

                    b.Navigation("Hasrole");

                    b.Navigation("Invitation");

                    b.Navigation("Message");

                    b.Navigation("Owns");

                    b.Navigation("Participant");

                    b.Navigation("Participationrequest");

                    b.Navigation("Plan");

                    b.Navigation("Player");

                    b.Navigation("Reviews");

                    b.Navigation("Spectator");
                });

            modelBuilder.Entity("LiveGameApp.Models.Game", b =>
                {
                    b.Navigation("Author");

                    b.Navigation("Isgenre");

                    b.Navigation("Owns");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("LiveGameApp.Models.Gamegenre", b =>
                {
                    b.Navigation("Isgenre");
                });

            modelBuilder.Entity("LiveGameApp.Models.Inviterequesttype", b =>
                {
                    b.Navigation("Invitation");

                    b.Navigation("Participationrequest");
                });

            modelBuilder.Entity("LiveGameApp.Models.Plan", b =>
                {
                    b.Navigation("Invitation");

                    b.Navigation("Participationrequest");

                    b.Navigation("Player");

                    b.Navigation("Spectator");
                });

            modelBuilder.Entity("LiveGameApp.Models.Plantype", b =>
                {
                    b.Navigation("Plan");
                });

            modelBuilder.Entity("LiveGameApp.Models.Privacytype", b =>
                {
                    b.Navigation("Plan");
                });

            modelBuilder.Entity("LiveGameApp.Models.Reviewable", b =>
                {
                    b.Navigation("Game")
                        .IsRequired();

                    b.Navigation("Plan")
                        .IsRequired();

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("LiveGameApp.Models.Role", b =>
                {
                    b.Navigation("Hasrole");
                });

            modelBuilder.Entity("LiveGameApp.Models.Room", b =>
                {
                    b.Navigation("Message");

                    b.Navigation("Participant");
                });
#pragma warning restore 612, 618
        }
    }
}
